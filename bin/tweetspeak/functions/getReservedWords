switch(sourceCode.charAt(index)) {
	case '#':
		token += sourceCode.charAt(index++);
		switch (sourceCode.charAt(index)) {
			// comment
			case 'c':
				token += sourceCode.charAt(index++);
				// lookforward "omment"
				if (sourceCode.charAt(index) == 'o' && sourceCode.charAt(index + 1) == 'm' 
				 && sourceCode.charAt(index + 2) == 'm' && sourceCode.charAt(index + 3) == 'e' 
				 && sourceCode.charAt(index + 4) == 'n' && sourceCode.charAt(index + 5) == 't'
				 && Character.isWhitespace(sourceCode.charAt(index + 6)) {
				token += sourceCode.substring(index);
				return new Token(token, TokenName.COMMENT.toString(), TokenType.RESERVED_WORD.toString(), lineCode.getLineNumber(), token.length() - 1);
				} /* else {
				index --; 
				tokenized += "[INVALID_TOKEN = COMMENT @" + index + "]";
				continue;
				} */

			// follow
			case 'f':
				token += sourceCode.charAt(index++);
				if (sourceCode.charAt(index) == 'o') {
					token += sourceCode.charAt(index++);
					if (sourceCode.charAt(index) == 'l') {
						token += sourceCode.charAt(index++);
						if (sourceCode.charAt(index) == 'l') {
							token += sourceCode.charAt(index++);
							if (sourceCode.charAt(index) == 'o') {
								token += sourceCode.charAt(index++);
								if (sourceCode.charAt(index) == 'w') {
									token += sourceCode.charAt(index++);
									if (sourceCode.charAt(index) == ' ' || sourceCode.charAt(index) == ';') {
										return new Token(token, TokenName.CONTINUE.toString(), TokenType.RESERVED_WORD.toString(), lineCode.getLineNumber(), index - 1);
									} else return new Error(token, "INVALID TOKEN - #follow", lineCode.getLineNumber(), index);
								} else return new Error(token, "INVALID TOKEN - #follow", lineCode.getLineNumber(), index);							
							} else return new Error(token, "INVALID TOKEN - #follow", lineCode.getLineNumber(), index);
						} else return new Error(token, "INVALID TOKEN - #follow", lineCode.getLineNumber(), index);
					} else return new Error(token, "INVALID TOKEN - #follow", lineCode.getLineNumber(), index);
				} else return new Error(token, "INVALID TOKEN - #follow", lineCode.getLineNumber(), index);
				
			// inbox
			case 'i':
				token += sourceCode.charAt(index++);
				if (sourceCode.charAt(index) == 'n') {
					token += sourceCode.charAt(index++);
					if (sourceCode.charAt(index) == 'b') {
						token += sourceCode.charAt(index++);
						if (sourceCode.charAt(index) == 'o') {
							token += sourceCode.charAt(index++);
							if (sourceCode.charAt(index) == 'x') {
								token += sourceCode.charAt(index++);
								if (sourceCode.charAt(index) == ' ') {
									return new Token(token, TokenName.INPUT.toString(), TokenType.RESERVED_WORD.toString(), lineCode.getLineNumber(), index - 1);
								} else return new Error(token, "INVALID TOKEN - #inbox", lineCode.getLineNumber(), index);
							} else return new Error(token, "INVALID TOKEN - #inbox", lineCode.getLineNumber(), index);
						} else return new Error(token, "INVALID TOKEN - #inbox", lineCode.getLineNumber(), index);
					} else return new Error(token, "INVALID TOKEN - #inbox", lineCode.getLineNumber(), index);
				} else return new Error(token, "INVALID TOKEN - #inbox", lineCode.getLineNumber(), index);
				

			// like, login, logout
			case 'l':
				token += sourceCode.charAt(index++);
				if (sourceCode.charAt(index) == 'i') {
					token += sourceCode.charAt(index++);
					if (sourceCode.charAt(index) == 'k') {
						token += sourceCode.charAt(index++);
						if (sourceCode.charAt(index) == 'e') {
							return new Token(token, TokenName.DO.toString(), TokenType.RESERVED_WORD.toString(), lineCode.getLineNumber(), index);
						} else return new Error(token, "INVALID TOKEN - #like", lineCode.getLineNumber(), index);
					} else return new Error(token, "INVALID TOKEN - #like", lineCode.getLineNumber(), index);
				} else if (sourceCode.charAt(index) == 'o') {
					token += sourceCode.charAt(index++);
					if (sourceCode.charAt(index) == 'g') {
						token += sourceCode.charAt(index++);
						if (sourceCode.charAt(index) == 'i') {
							token += sourceCode.charAt(index++);
							if (sourceCode.charAt(index) == 'n') {
								token += sourceCode.charAt(index++);
								if (sourceCode.charAt(index) == ' ' && index - 6 == 0) {
									return new Token(token, TokenName.START.toString(), TokenType.RESERVED_WORD.toString(), lineCode.getLineNumber(), index - 1);
								} else return new Error(token, "INVALID TOKEN - #login", lineCode.getLineNumber(), index);
							} else return new Error(token, "INVALID TOKEN - #login", lineCode.getLineNumber(), index);
						} else if (sourceCode.charAt(index) == 'o') {
							token += sourceCode.charAt(index++);
							if (sourceCode.charAt(index) == 'u') {
								token += sourceCode.charAt(index++);
								if (sourceCode.charAt(index) == 't') {
									token += sourceCode.charAt(index++);
									if (index == sourceCode.length()) {
										return new Token(token, TokenName.END.toString(), TokenType.RESERVED_WORD.toString(), lineCode.getLineNumber(), index - 1);
									} else return new Error(token, "INVALID TOKEN - #logout", lineCode.getLineNumber(), index);
								} else return new Error(token, "INVALID TOKEN - #logout", lineCode.getLineNumber(), index);
							} else return new Error(token, "INVALID TOKEN - #logout", lineCode.getLineNumber(), index);
						} else return new Error(token, "INVALID TOKEN - #logout", lineCode.getLineNumber(), index);
					} else return new Error(token, "INVALID TOKEN - #login, #logout", lineCode.getLineNumber(), index);
				} else return new Error(token, "INVALID TOKEN - #login, #logout", lineCode.getLineNumber(), index);
				

			// newsfeed
			case 'n':
				token += sourceCode.charAt(index++); count++;
				// lookforward "ewsfeed"
				if(sourceCode.charAt(index) == 'e' && sourceCode.charAt(index + 1) == 'w' 
				&& sourceCode.charAt(index + 2) == 's' && sourceCode.charAt(index + 3) == 'f' 
				&& sourceCode.charAt(index + 4) == 'e' && sourceCode.charAt(index + 5) == 'e' 
				&& sourceCode.charAt(index + 6) == 'd') {
				token += "ewsfeed"; count += 7; index += 7;	
				t = new Token(
				token, 
				TokenName.MAIN.toString(), 
				TokenType.RESERVED_WORD.toString(), 
				lineCode.getLineNumber(), 
				index - count
				);
				// add to lists
				tokens.add(t);
				lineCode.addToken(t);
				tokenized += "[" + t.getName() + "]";
				continue;
				} else {
				index --;
				tokenized += token + ".MAIN_ERROR";
				continue;
				}

			// ooti, ootf, ootc, oots, ootb, ootv
			case 'o': 
			token += sourceCode.charAt(index++); count++;
			if(sourceCode.charAt(index) == 'o' && sourceCode.charAt(index + 1) == 't') {
			token += "ot"; index +=2; count +=2;
			DATA 
			* TYPES

			switch(sourceCode.charAt(index)) {
			//int
			case 'i': 
			token += sourceCode.charAt(index++); count++;
			if (index < sourceCode.length() && sourceCode.charAt(index++) == ' ') {
			t = new Token(
			token, 
			TokenName.DATATYPE_INT.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";

			// if next is identifier
			if (Character.isLetter(sourceCode.charAt(index))) {
			t = getIdentifier(lineCode, index);
			if (t != null) {
			tokenized += "[" + t.getLexeme() + "]";
			tokens.add(t);
			lineCode.addToken(t);
			index += t.getLexeme().length();
			}
			}
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			// float
			case 'f':
			token += sourceCode.charAt(index++); count++;
			if (index < sourceCode.length() && sourceCode.charAt(index++) == ' ') {
			t = new Token(
			token, 
			TokenName.DATATYPE_FLOAT.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";

			// if next is identifier
			if (Character.isLetter(sourceCode.charAt(index))) {
			t = getIdentifier(lineCode, index);
			if (t != null) {
			tokenized += "[" + t.getLexeme() + "]";
			tokens.add(t);
			lineCode.addToken(t);
			index += t.getLexeme().length();
			}
			}
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			// char
			case 'c':
			token += sourceCode.charAt(index++); count++;
			if (index < sourceCode.length() && sourceCode.charAt(index++) == ' ') {
			t = new Token(
			token, 
			TokenName.DATATYPE_CHAR.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";

			// if next is identifier
			if (Character.isLetter(sourceCode.charAt(index))) {
			t = getIdentifier(lineCode, index);
			if (t != null) {
			tokenized += "[" + t.getLexeme() + "]";
			tokens.add(t);
			lineCode.addToken(t);
			index += t.getLexeme().length();
			}
			}
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			// string
			case 's':
			token += sourceCode.charAt(index++); count++;
			if (index < sourceCode.length() && sourceCode.charAt(index++) == ' ') {
			t = new Token(
			token, 
			TokenName.DATATYPE_STRING.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";

			// if next is identifier
			if (Character.isLetter(sourceCode.charAt(index))) {
			t = getIdentifier(lineCode, index);
			if (t != null) {
			tokenized += "[" + t.getLexeme() + "]";
			tokens.add(t);
			lineCode.addToken(t);
			index += t.getLexeme().length();
			}
			}
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			// boolean
			case 'b':
			token += sourceCode.charAt(index++); count++;
			if (index < sourceCode.length() && sourceCode.charAt(index++) == ' ') {
			t = new Token(
			token, 
			TokenName.DATATYPE_BOOL.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";

			// if next is identifier
			if (Character.isLetter(sourceCode.charAt(index))) {
			t = getIdentifier(lineCode, index);
			if (t != null) {
			tokenized += "[" + t.getLexeme() + "]";
			tokens.add(t);
			lineCode.addToken(t);
			index += t.getLexeme().length();
			}
			}
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			// void
			case 'v':
			token += sourceCode.charAt(index++); count++;
			if (index < sourceCode.length() && sourceCode.charAt(index++) == ' ') {
			t = new Token(
			token, 
			TokenName.DATATYPE_VOID.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";

			continue;

			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			// LEVEL 3 DATATYPE SWITCH
			default:
			tokenized += token + ".DATATYPE_ERROR";
			index -= 2;
			continue;
			}
			}

			//#outbox
			else if (sourceCode.charAt(index) == 'u' && sourceCode.charAt(index + 1) == 't' 
			&& sourceCode.charAt(index + 2) == 'b' && sourceCode.charAt(index + 3) == 'o' 
			&& sourceCode.charAt(index + 4) == 'x') {
			token += "utbox"; index += 5; count += 5;
			if (index < sourceCode.length() && sourceCode.charAt(index) == ' ') {
			t = new Token(
			token, 
			TokenName.OUTPUT.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			index++;
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";
			continue;
			} else {
			index --;
			tokenized += token + ".OUTPUT_ERROR";
			continue;
			}
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}


			// retweet reply
			case 'r':
			token += sourceCode.charAt(index++); count++;
			if (sourceCode.charAt(index) == 'e') {
			token += sourceCode.charAt(index++); count++;
			switch(sourceCode.charAt(index)) {
			//#RETWEET
			case 't':
			token += sourceCode.charAt(index++); count++;
			if(sourceCode.charAt(index) == 'w' && sourceCode.charAt(index + 1) == 'e' 
			&& sourceCode.charAt(index + 2) == 'e' && sourceCode.charAt(index + 3) == 't') {
			token += "weet"; index += 4; count += 4;
			if (index < sourceCode.length() && sourceCode.charAt(index) == ' ') {
			t = new Token(
			token, 
			TokenName.ELSE_IF.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}
			//#REPLY
			case 'p':
			token += sourceCode.charAt(index++); count++;
			if (sourceCode.charAt(index) == 'l' && sourceCode.charAt(index + 1) == 'y') {
			token += "ly"; index += 2; count += 2;
			if (index < sourceCode.length() && sourceCode.charAt(index) == ' ') {
			t = new Token(
			token, 
			TokenName.ELSE.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			// LEVEL 3 RETWEET REPLY SWITCH
			default: 
			tokenized += token + ".ERROR";
			index--;
			continue;
			}
			} else {
			index --;
			tokenized += token + ".ERROR";
			}

			// share, status
			case 's':
			token += sourceCode.charAt(index++); count++;
			switch(sourceCode.charAt(index)) {
			//#SHARE
			case 'h':
			token += sourceCode.charAt(index++); count++;
			if (sourceCode.charAt(index) == 'a' 
			&& sourceCode.charAt(index + 1) == 'r' 
			&& sourceCode.charAt(index + 2) == 'e') {
			token += "are"; index += 3; count += 3;
			if (index < sourceCode.length() && sourceCode.charAt(index) == ' ') {
			t = new Token(
			token, 
			TokenName.ASSIGN.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";
			continue;
			} else {
			index --;
			tokenized += token + ".ASSIGN_ERROR";
			continue;
			}
			} else {
			index --;
			tokenized += token + ".ASSIGN_ERROR";
			continue;
			}

			//#STATUS
			case 't':
			token += sourceCode.charAt(index++); count++;
			if (sourceCode.charAt(index) == 'a' && sourceCode.charAt(index + 1) == 't' 
			&& sourceCode.charAt(index + 2) == 'u' && sourceCode.charAt(index + 3) == 's') {
			token += "atus"; index += 4; count += 4;
			if (index < sourceCode.length() && sourceCode.charAt(index) == ' ') {
			t = new Token(
			token, 
			TokenName.WHILE.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);
			// TODO: INSERT IDENTIFIER SCAN
			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";
			continue;
			} else {
			index --;
			tokenized += token + ".WHILE_ERROR";
			}
			} else {
			index --;
			tokenized += token + ".WHILE_ERROR";
			continue;
			}

			//	LEVEL 3 SHARE/STATUS SWITCH 
			default:
			tokenized += sourceCode.charAt(index) + " " + index + " " + sourceCode.length();
			index --;
			continue;
			}

			// trending, throwback, tweet
			case 't':
			token += sourceCode.charAt(index++); count++;
			switch(sourceCode.charAt(index)) {

			//#TRENDING
			case 'r':
			token += sourceCode.charAt(index++); count++;
			if(sourceCode.charAt(index) == 'e' && sourceCode.charAt(index + 1) == 'n' 
			&& sourceCode.charAt(index + 2) == 'd' && sourceCode.charAt(index + 3) == 'i' 
			&& sourceCode.charAt(index + 4) == 'n' && sourceCode.charAt(index + 5) == 'g') {
			token += "ending"; index += 6; count +=6;
			if (index < sourceCode.length() && sourceCode.charAt(index) == ' ') {
			t = new Token(
			token, 
			TokenName.PROC_CALL.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			//#THROWBACK
			case 'h':
			token += sourceCode.charAt(index++); count++;
			if (sourceCode.charAt(index) == 'r' && sourceCode.charAt(index + 1) == 'o' 
			&& sourceCode.charAt(index + 2) == 'w' && sourceCode.charAt(index + 3) == 'b'
			&& sourceCode.charAt(index + 4) == 'a' && sourceCode.charAt(index + 5) == 'c'
			&& sourceCode.charAt(index + 6) == 'k') {
			token += "rowback"; index += 7; count += 7;
			if (index < sourceCode.length() && sourceCode.charAt(index) == ' ') {
			t = new Token(
			token, 
			TokenName.PROC_RET.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			//#TWEET
			case 'w':
			token += sourceCode.charAt(index++); count++;
			if(sourceCode.charAt(index) == 'e' && sourceCode.charAt(index + 1) =='e' 
			&& sourceCode.charAt(index + 2) == 't') {

			token += "eet"; index += 3; count += 3;
			if (index < sourceCode.length() && sourceCode.charAt(index) == ' ') {
			t = new Token(
			token, 
			TokenName.IF.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			}
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			//	LEVEL 3 TRENDING THROWBACK TWEET SWITCH
			default:
			tokenized += " level 3 exit";
			index --;
			continue;
			}


			// #UNFOLLOW
			case 'u':
			token += sourceCode.charAt(index++); count++;
			if (sourceCode.charAt(index) == 'n' && sourceCode.charAt(index + 1) == 'f' 
			&& sourceCode.charAt(index + 2) == 'o' && sourceCode.charAt(index + 3) == 'l' 
			&& sourceCode.charAt(index + 4) == 'l' && sourceCode.charAt(index + 5) == 'o'
			&& sourceCode.charAt(index + 6) == 'w'){

			token += "nfollow"; index += 7; count +=7;
			t = new Token(
			token, 
			TokenName.BREAK.toString(), 
			TokenType.RESERVED_WORD.toString(), 
			lineCode.getLineNumber(), 
			index - count
			);

			// add to lists
			tokens.add(t);
			lineCode.addToken(t);
			tokenized += "[" + t.getName() + "]";
			continue;
			} else {
			index --;
			tokenized += token + ".ERROR";
			continue;
			}

			//	LEVEL 2 SWITCH
			default:
			tokenized += sourceCode.charAt(index) + " " + index + " " + sourceCode.length();
			continue;
		}

		//	LEVEL 1 SWITCH
		default:
			if (Character.isLetter(sourceCode.charAt(index)) || sourceCode.charAt(index) == '_') {
				t = getIdentifier(lineCode, index);
				if (t != null) {
				tokens.add(t);
				lineCode.addToken(t);
				index += t.getLexeme().length() - 1;
				tokenized += "[" + t.getLexeme() + "]";
				//	               			continue;
				}
			}
}